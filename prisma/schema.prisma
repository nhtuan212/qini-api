generator client {
  provider = "prisma-client-js"
  output   = "../dist/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:123@45.251.114.243:2222/qini_db"
}

model Users {
  id       String    @id @default(uuid())
  username String    @unique @db.VarChar(50)
  password String    @db.VarChar(100)
  email    String?   @unique @db.VarChar(50)
  active   Boolean   @default(true)
  createAt DateTime  @default(now()) @db.Timestamp(6)
  role     Role      @default(USER)
  updateAt DateTime? @db.Timestamp(6)

  @@map("users")
}

model Staffs {
  id              String            @id @default(uuid())
  name            String            @unique @db.VarChar(50)
  active          Boolean           @default(true)
  createAt        DateTime          @default(now()) @db.Timestamp(6)
  updateAt        DateTime?         @db.Timestamp(6)
  reportsOnStaffs ReportsOnStaffs[]

  @@map("staffs")
}

model Reports {
  id              String            @id @default(uuid())
  shiftId         String            @db.VarChar(50)
  transfer        Float?            @db.Real
  cash            Float?            @db.Real
  deduction       Float?            @db.Real
  revenue         Float             @db.Real
  description     String?           @db.VarChar(200)
  createAt        DateTime          @default(now()) @db.Timestamp(6)
  updateAt        DateTime?         @db.Timestamp(6)
  isApproved      Boolean           @default(false)
  shift           Shifts            @relation(fields: [shiftId], references: [id])
  reportsOnStaffs ReportsOnStaffs[]

  @@map("reports")
}

model ReportsOnStaffs {
  id         String    @id @default(uuid())
  staffId    String    @db.VarChar(50)
  reportId   String    @db.VarChar(50)
  checkIn    String    @db.VarChar(10)
  checkOut   String    @db.VarChar(10)
  timeWorked Float     @db.Real
  target     Float     @db.Real
  createAt   DateTime  @default(now()) @db.Timestamp(6)
  updateAt   DateTime? @db.Timestamp(6)
  report     Reports   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  staff      Staffs    @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("reports_on_staffs")
}

model Shifts {
  id       String    @id @default(uuid())
  name     String    @unique @db.VarChar(50)
  createAt DateTime  @default(now()) @db.Timestamp(6)
  updateAt DateTime? @db.Timestamp(6)
  Reports  Reports[]

  @@map("shifts")
}

enum Role {
  USER
  ADMIN
  REPORT
}
